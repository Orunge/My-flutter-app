const express = require('express');
const router = express.Router();
const Game = require('../models/Game');
const { getGames, addGame, saveProgress } = require('../controllers/gameController');

// üß† GET –±“Ø—Ö —Ç–æ–≥–ª–æ–æ–º
router.get('/list', getGames);

// ‚ûï POST —à–∏–Ω—ç —Ç–æ–≥–ª–æ–æ–º
router.post('/add', addGame);

// üíæ POST —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö–∞—Ä–∏—É
router.post('/progress', saveProgress);

// üé® Color Sequence –∞—Å—É—É–ª—Ç –Ω—ç–º—ç—Ö
router.post('/add-color-sequence', async (req, res) => {
    const { type, question, correct, options } = req.body;
  
    // ‚ö†Ô∏è –ó–∞–∞–≤–∞–ª —à–∞–ª–≥–∞—Ö —Ç–∞–ª–±–∞—Ä—É—É–¥
    if (
      !type ||
      typeof question !== 'string' ||
      !correct ||
      !Array.isArray(options)
    ) {
      return res.status(400).json({ message: '‚ùå Invalid input format' });
    }
  
    try {
      const newGame = new Game({
        type,
        question, // üî• –∞–ª—å —Ö—ç–¥–∏–π–Ω string —Ö—ç–ª–±—ç—Ä—ç—ç—Ä ”©–≥”©–≥–¥”©–∂ –±–∞–π–≥–∞–∞
        correct,
        options
      });
  
      await newGame.save();
      res.json({ message: '‚úÖ Color-sequence –Ω—ç–º—ç–≥–¥–ª—ç—ç!' });
    } catch (error) {
      console.error('‚ùå –•–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:', error);
      res.status(500).json({ message: '‚ùå Server error', error });
    }
  });
  

module.exports = router;
